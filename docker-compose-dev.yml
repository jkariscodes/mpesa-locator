version: '3.9'

services:

  database:
    image: geonode/postgis:15
    container_name: database4${COMPOSE_PROJECT_NAME}
    ports:
        - '5432:5432'
    volumes:
        - ./init_db:/docker-entrypoint-initdb.d/
        - postgres_data_dev:/var/lib/postgresql/data/
    environment:
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - GIS_DB_NAME=${GIS_DB_NAME}
        - GIS_DB_USER=${GIS_DB_USER}
        - GIS_DB_PASSWORD=${GIS_DB_PASSWORD}
    healthcheck:
        test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "$POSTGRES_USER" ]
        timeout: 40s
        interval: 10s
        retries: 10
    restart: always
#    networks:
#        - mpesa_location

  backend:
      build:
          context: .
          dockerfile: docker/Dockerfile-django-dev
      container_name: backend4${COMPOSE_PROJECT_NAME}
      command: python /home/geouser/mpesa_locations/manage.py runserver 0.0.0.0:8000
      env_file:
          - .env
      environment:
          - DJANGO_SETTINGS_MODULE=mpesa_loc.settings.local
      volumes:
          - static_volume:/home/geouser/mpesa_locations/staticfiles
          - media_volume:/home/geouser/mpesa_locations/mediafiles
      ports:
          - "8000:8000"
      restart: always
      depends_on:
          database:
              condition: service_healthy
#      networks:
#          - mpesa_location

#  frontend:
#    build:
#        context: ./dpw_client
#        dockerfile: Dockerfile
#    container_name: frontend4${COMPOSE_PROJECT_NAME}
#    volumes:
#        - ./dpw_client:/usr/src/app
#    ports:
#        - "3000:3000"
#    environment:
#        - NODE_ENV=development
#    depends_on:
#        - dpw-api
#    networks:
#        - mpesa_location

volumes:
    postgres_data_dev:
    static_volume:
    media_volume:
